"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5851],{8510:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=s(4848),a=s(8453);const r={sidebar_position:1,title:"Working with StorageClass and PVCs"},i=void 0,o={id:"kubernetes-basics/kubernetes-advanced/pod-with-pvc",title:"Working with StorageClass and PVCs",description:"StorageClasses define how Kubernetes creates and manages volumes. In this scenario, we explore how to use StorageClasses and PersistentVolumeClaims (PVCs) to allocate storage resources.",source:"@site/docs/kubernetes-basics/kubernetes-advanced/pod-with-pvc.md",sourceDirName:"kubernetes-basics/kubernetes-advanced",slug:"/kubernetes-basics/kubernetes-advanced/pod-with-pvc",permalink:"/hands-on-containers/kubernetes-basics/kubernetes-advanced/pod-with-pvc",draft:!1,unlisted:!1,editUrl:"https://github.com/armagankaratosun/hands-on-containers/tree/main/packages/create-docusaurus/templates/shared/docs/kubernetes-basics/kubernetes-advanced/pod-with-pvc.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Working with StorageClass and PVCs"},sidebar:"tutorialSidebar",previous:{title:"Kubernetes: Advanced Topics",permalink:"/hands-on-containers/category/kubernetes-advanced-topics"},next:{title:"Exposing Services via Loadbalancer",permalink:"/hands-on-containers/kubernetes-basics/kubernetes-advanced/service-loadbalancer"}},l={},c=[{value:"Checking Available Storage Classes",id:"checking-available-storage-classes",level:2},{value:"Access Modes",id:"access-modes",level:3},{value:"Create a PVC",id:"create-a-pvc",level:2},{value:"Deployment Using the PVC",id:"deployment-using-the-pvc",level:2},{value:"Expose the Deployment with a Service",id:"expose-the-deployment-with-a-service",level:2},{value:"Example Output",id:"example-output",level:3},{value:"What just happened?",id:"what-just-happened",level:3},{value:"Browser Output",id:"browser-output",level:4},{value:"Bonus Points",id:"bonus-points",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"StorageClasses define how Kubernetes creates and manages volumes. In this scenario, we explore how to use StorageClasses and PersistentVolumeClaims (PVCs) to allocate storage resources."}),"\n",(0,n.jsxs)(t.p,{children:["Source code: ",(0,n.jsx)(t.a,{href:"https://github.com/armagankaratosun/k8s-getting-started/blob/main/Deployments/deployment-volume.yaml",children:"k8s-getting-started GitHub Repository"})]}),"\n",(0,n.jsx)(t.h2,{id:"checking-available-storage-classes",children:"Checking Available Storage Classes"}),"\n",(0,n.jsx)(t.p,{children:"First, list available StorageClasses to identify which one suits your needs."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"armagan@ ~ $ kubectl get storageclass\nNAME                             PROVISIONER                RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\ncsi-cinder-sc-delete (default)   cinder.csi.openstack.org   Delete          Immediate           true                   14d\ncsi-cinder-sc-retain             cinder.csi.openstack.org   Retain          Immediate           true                   14d\n"})}),"\n",(0,n.jsx)(t.h3,{id:"access-modes",children:"Access Modes"}),"\n",(0,n.jsx)(t.p,{children:"Access modes in Kubernetes define how pods can access a PersistentVolume (PV). Here are the common types:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"ReadWriteOnce (RWO):"})," A single pod can mount the volume as read-write."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"ReadOnlyMany (ROX):"})," Multiple pods can mount the volume as read-only."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"ReadWriteMany (RWX):"})," The volume can be mounted as read-write by many pods simultaneously."]}),"\n"]}),"\n",(0,n.jsx)(t.admonition,{type:"warning",children:(0,n.jsx)(t.p,{children:"When you set the access mode for your application, be sure to check that the StorageClass supports it."})}),"\n",(0,n.jsxs)(t.p,{children:["For more detailed information, visit the Kubernetes documentation on ",(0,n.jsx)(t.a,{href:"https://kubernetes.io/docs/concepts/storage/persistent-volumes/",children:"Persistent Volumes at K8s docs"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"create-a-pvc",children:"Create a PVC"}),"\n",(0,n.jsxs)(t.p,{children:["A PersistentVolumeClaim (PVC) is required to request a Persistent Volume (PV) from a Storage Class. Below is how to define a PVC in your cluster, requesting 1Gi of storage and using the ",(0,n.jsx)(t.code,{children:"csi-cinder-sc-delete"})," StorageClass to delete the volume automatically when the PVC is deleted. (PVC part of the ",(0,n.jsx)(t.code,{children:"Deployments/deployment-volume.yaml"}),")"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: k8s-getting-started-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce                      # The volume can be mounted as read-write by a single node\n  storageClassName: csi-cinder-sc-delete # Replace with the name of your storage class\n  resources:\n    requests:\n      storage: 1Gi                       # Requests 1Gi of storage\n"})}),"\n",(0,n.jsx)(t.h2,{id:"deployment-using-the-pvc",children:"Deployment Using the PVC"}),"\n",(0,n.jsxs)(t.p,{children:["When deploying applications that require persistent storage, you need to reference the PVC within your Deployment configuration. Below is the YAML manifest for mounting the requested storage to a container in a Deployment using the ",(0,n.jsx)(t.code,{children:"armagankaratosun/k8s-getting-started:v3"})," image, which requires persistency."]}),"\n",(0,n.jsxs)(t.p,{children:["(Deployment part of the ",(0,n.jsx)(t.code,{children:"Deployments/deployment-volume.yaml"}),")"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: k8s-getting-started-volume\n  labels:\n    app: k8s-getting-started-volume\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: k8s-getting-started-volume\n  template:\n    metadata:\n      labels:\n        app: k8s-getting-started-volume\n    spec:\n      containers:\n        - name: k8s-getting-started-volume\n          image: armagankaratosun/k8s-getting-started:v3  # Updated to v3\n          ports:\n            - containerPort: 8080\n          volumeMounts:\n            - name: app-storage               # Attach the PVC as a volume in the container\n              mountPath: /data                # Path inside the container where the volume is mounted\n      volumes:\n        - name: app-storage\n          persistentVolumeClaim:\n            claimName: k8s-getting-started-volume-pvc  # Reference the PVC created above\n"})}),"\n",(0,n.jsx)(t.h2,{id:"expose-the-deployment-with-a-service",children:"Expose the Deployment with a Service"}),"\n",(0,n.jsx)(t.p,{children:"This will create a ClusterIP service, accessible only from within the cluster (or via kubectl port-forward)."}),"\n",(0,n.jsxs)(t.p,{children:["(Service part of the ",(0,n.jsx)(t.code,{children:"Deployments/deployment-volume.yaml"}),")"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: k8s-getting-started-volume-service\nspec:\n  type: ClusterIP                       # Internal-only access within the cluster\n  selector:\n    app: k8s-getting-started-volume      # Matches the label of the Deployment\n  ports:\n    - protocol: TCP\n      port: 8080                           # Port exposed by the service\n      targetPort: 8080                   # Port on the container that the app is running on\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Now you can use ",(0,n.jsx)(t.code,{children:"kubeclt port-forward"})," again to expose the service locally."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"kubectl port-forward service/k8s-getting-started-volume-service 8080:8080\n"})}),"\n",(0,n.jsxs)(t.p,{children:["and access the app in your browser at ",(0,n.jsx)(t.a,{href:"http://localhost:8080",children:"http://localhost:8080"})]}),"\n",(0,n.jsx)(t.h3,{id:"example-output",children:"Example Output"}),"\n",(0,n.jsx)(t.p,{children:"Creating the Deployment manifest"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"armagan@ ~ $ kubectl apply -f deployment-with-volume.yaml\ndeployment.apps/k8s-getting-started-volume created\n"})}),"\n",(0,n.jsxs)(t.p,{children:["We now see a deployment called ",(0,n.jsx)(t.code,{children:"k8s-getting-started-volume "})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"armagan@ ~ $ kubectl get deployments\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\nk8s-getting-started-volume   1/1     1            1           22s\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Once we have the deployment in ",(0,n.jsx)(t.code,{children:"READY"})," status, we can check the PVC to see our Persistent Volume Claim."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"armagan@ ~ $ kubectl get pvc\nNAME                             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS           VOLUMEATTRIBUTESCLASS   AGE\nk8s-getting-started-volume-pvc   Bound    pvc-b4de2b98-667e-4781-b6e5-def6443ceba9   1Gi        RWO            csi-cinder-sc-delete   <unset>                 13d\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Status ",(0,n.jsx)(t.code,{children:"Bound"})," means that the PVC is bounded to a Persistent Volume (PV) that is created by the StorageClass automatically."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"armagan@ ~ $ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                            STORAGECLASS           VOLUMEATTRIBUTESCLASS   REASON   AGE\npvc-b4de2b98-667e-4781-b6e5-def6443ceba9   1Gi        RWO            Delete           Bound    k8s-training-25/k8s-getting-started-volume-pvc   csi-cinder-sc-delete   <unset>\n"})}),"\n",(0,n.jsx)(t.h3,{id:"what-just-happened",children:"What just happened?"}),"\n",(0,n.jsx)(t.p,{children:"Now the messages that you enter will be stored in a list, which will be a simple txt file stored on the Persistent Volume (PV), provisioned by the Storage Class and reffered by your Persistent Volume Claim (PVC) manifest."}),"\n",(0,n.jsx)(t.h4,{id:"browser-output",children:"Browser Output"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"alt text",src:s(9796).A+"",width:"1203",height:"818"})}),"\n",(0,n.jsx)(t.h3,{id:"bonus-points",children:"Bonus Points"}),"\n",(0,n.jsx)(t.p,{children:"Verify that the messages are retained persistently by deleting the pods. Is there a way to delete the messages and start from scratch?"})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},9796:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/persistent-2a2faf94de0856c99e72ed11cd0a3ca5.png"},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(6540);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);